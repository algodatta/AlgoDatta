from pydantic import BaseModel
import os
class Settings(BaseModel):
    SECRET_KEY: str = os.getenv("SECRET_KEY","changeme")
    ACCESS_TOKEN_EXPIRE_MINUTES: int = int(os.getenv("ACCESS_TOKEN_EXPIRE_MINUTES","60"))
    DATABASE_URL: str = os.getenv("DATABASE_URL","sqlite:///./algodatta.db")
    FRONTEND_BASE_URL: str = os.getenv("FRONTEND_BASE_URL", "http://localhost:3000")
    AWS_REGION: str = os.getenv("AWS_REGION", "ap-south-1")
    SES_FROM_EMAIL: str = os.getenv("SES_FROM_EMAIL", "")
    SES_CONFIG_SET_NAME: str = os.getenv("SES_CONFIG_SET_NAME", "")
    AWS_PROFILE: str = os.getenv("AWS_PROFILE", "")
    REDIS_URL: str = os.getenv("REDIS_URL", "")
    EMAIL_RATE_LIMIT_PER_MINUTE: int = int(os.getenv("EMAIL_RATE_LIMIT_PER_MINUTE", "60"))
    EMAIL_RATE_LIMIT_PER_HOUR: int = int(os.getenv("EMAIL_RATE_LIMIT_PER_HOUR", "1000"))
    EMAIL_RECIPIENT_LIMIT_PER_HOUR: int = int(os.getenv("EMAIL_RECIPIENT_LIMIT_PER_HOUR", "10"))
    EMAIL_RECIPIENT_LIMIT_PER_DAY: int = int(os.getenv("EMAIL_RECIPIENT_LIMIT_PER_DAY", "50"))
    EMAIL_MAX_RETRIES: int = int(os.getenv("EMAIL_MAX_RETRIES", "3"))
    EMAIL_BACKOFF_BASE_SECONDS: float = float(os.getenv("EMAIL_BACKOFF_BASE_SECONDS", "0.5"))
    EMAIL_BACKOFF_MAX_SECONDS: float = float(os.getenv("EMAIL_BACKOFF_MAX_SECONDS", "5.0"))
    BRAND_NAME: str = os.getenv("BRAND_NAME", "AlgoDatta")
    BRAND_PRIMARY: str = os.getenv("BRAND_PRIMARY", "#111111")
    BRAND_LOGO_URL: str = os.getenv("BRAND_LOGO_URL", "")
    EMAIL_THEME: str = os.getenv("EMAIL_THEME", "dark")
    PASSWORD_RESET_TOKEN_TTL_MINUTES: int = int(os.getenv("PASSWORD_RESET_TOKEN_TTL_MINUTES", "30"))
    PASSWORD_RESET_REQUESTS_PER_HOUR: int = int(os.getenv("PASSWORD_RESET_REQUESTS_PER_HOUR", "3"))
    PASSWORD_RESET_GLOBAL_PER_MINUTE: int = int(os.getenv("PASSWORD_RESET_GLOBAL_PER_MINUTE", "60"))
settings = Settings()
